In computer science, communicating sequential processes (CSP) is a formal language for describing patterns of interaction in concurrent systems.<ref name="roscoe"></ref> It is a member of the family of mathematical theories of concurrency known as process algebras, or process calculi, based on message passing via channels. CSP was highly influential in the design of the occam programming language<ref name="roscoe" /><ref>, INMOS document 72 occ 45 03.</ref> and also influenced the design of programming languages such as Limbo,<ref></ref> RaftLib, Go,<ref name="golang"></ref> Crystal, and Clojure's core.async.<ref name="clojure-core-async"></ref>
CSP was first described in a 1978 article by Tony Hoare,<ref name="hoare1978"></ref> but has since evolved substantially.<ref name="25years"></ref> CSP has been practically applied in industry as a tool for formal specification the concurrent aspects of a variety of different systems, such as the T9000 Transputer,<ref name="barrett"></ref> as well as a secure ecommerce system.<ref name="hall"></ref> The theory of CSP itself is also still the subject of active research, including work to increase its range of practical applicability (e.g., increasing the scale of the systems that can be tractably analyzed).<ref></ref>