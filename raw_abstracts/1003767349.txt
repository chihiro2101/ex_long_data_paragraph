In object-oriented and functional programming, an immutable object (unchangeable<ref></ref> object) is an object whose state cannot be modified after it is created.<ref name=Goetz>Goetz et al. Java Concurrency in Practice. Addison Wesley Professional, 2006, Section 3.4. Immutability</ref> This is in contrast to a mutable object (changeable object), which can be modified after it is created. <ref></ref> In some cases, an object is considered immutable even if some internally used attributes change, but the object's state appears unchanging from an external point of view. For example, an object that uses <!--
YES, THIS IS SPELLED CORRECTLY. IT'S *NOT* "memo*r*ization". READ THE LINKED ARTICLE.
-->memoization to cache the results of expensive computations could still be considered an immutable object.
Strings and other concrete objects are typically expressed as immutable objects to improve readability and runtime efficiency in object-oriented programming. Immutable objects are also useful because they are inherently thread-safe.<ref name=Goetz /> Other benefits are that they are simpler to understand and reason about and offer higher security than mutable objects.<ref name=Goetz />