In computer science, a high-level programming language is a programming language with strong abstraction from the details of the computer. In contrast to low-level programming languages, it may use natural language elements, be easier to use, or may automate (or even hide entirely) significant areas of computing systems (e.g. memory management), making the process of developing a program simpler and more understandable than when using a lower-level language. The amount of abstraction provided defines how "high-level" a programming language is.<ref> urltoken HThreads - RD Glossary</ref>
In the 1960s, high-level programming languages using a compiler were commonly called autocodes.<ref name=kleith></ref>
Examples of autocodes are COBOL and Fortran.<ref name=kleith2></ref>
The first high-level programming language designed for computers was Plankalkül, created by Konrad Zuse.<ref> (1997). "Konrad Zuse's Plankalkül: The First High-Level "non von Neumann" Programming Language". IEEE Annals of the History of Computing, vol. 19, no. 2, pp.&nbsp;17–24, April–June, 1997. urltoken (abstract)</ref> However, it was not implemented in his time, and his original contributions were largely isolated from other developments due to World War II, aside from the language's influence on the "Superplan" language by Heinz Rutishauser and also to some degree ALGOL. The first significantly widespread high-level language was Fortran, a machine-independent development of IBM's earlier Autocode systems. ALGOL, defined in 1958 and 1960 by committees of European and American computer scientists, introduced recursion as well as nested functions under lexical scope. It was also the first language with a clear distinction between value and call by names and their corresponding semantics.<ref>Although it lacked a notion of call by references, which could be a problem in some situations. Several successors, including AlgolW, Algol68, Simula, Pascal, Modula and Ada therefore included reference-parameters (The related C-language family instead allowed addresses as value-parameters).</ref> Algol also introduced several structured programming concepts, such as the while-do and if-then-else constructs and its syntax was the first to be described in formal notation – "Backus–Naur form" (BNF). During roughly the same period, Cobol introduced records (also called structs) and Lisp introduced a fully general lambda abstraction in a programming language for the first time.