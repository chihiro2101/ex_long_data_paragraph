In databases and transaction processing, two-phase locking (2PL) is a concurrency control method that guarantees serializability.<ref name=Bern1987>Phil Bernstein, Vassos Hadzilacos, Nathan Goodman (1987): urltoken Concurrency Control and Recovery in Database Systems, Addison Wesley Publishing Company, </ref><ref name=Weikum2001>Gerhard Weikum, Gottfried Vossen (2001): urltoken Transactional Information Systems, Elsevier, </ref>
It is also the name of the resulting set of database transaction schedules (histories). The protocol utilizes locks, applied by a transaction to data, which may block (interpreted as signals to stop) other transactions from accessing the same data during the transaction's life.
By the 2PL protocol, locks are applied and removed in two phases:
# Expanding phase: locks are acquired and no locks are released.
# Shrinking phase: locks are released and no locks are acquired.
Two types of locks are utilized by the basic protocol: Shared and Exclusive locks. Refinements of the basic protocol may utilize more lock types. Using locks that block processes, 2PL may be subject to deadlocks that result from the mutual blocking of two or more transactions.