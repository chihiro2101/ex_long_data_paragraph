Distributed hash table

== History ==
DHT research was originally motivated, in part, by peer-to-peer (P2P) systems such as Freenet, Gnutella, BitTorrent and Napster, which took advantage of resources distributed across the Internet to provide a single useful application. In particular, they took advantage of increased bandwidth and hard disk capacity to provide a file-sharing service.<ref></ref>
These systems differed in how they located the data offered by their peers. Napster, the first large-scale P2P content delivery system, required a central index server: each node, upon joining, would send a list of locally held files to the server, which would perform searches and refer the queries to the nodes that held the results. This central component left the system vulnerable to attacks and lawsuits.
Gnutella and similar networks moved to a query flooding model in essence, each search would result in a message being broadcast to every other machine in the network. While avoiding a single point of failure, this method was significantly less efficient than Napster. Later versions of Gnutella clients moved to a dynamic querying model which vastly improved efficiency.<ref></ref>
Freenet is fully distributed, but employs a heuristic key-based routing in which each file is associated with a key, and files with similar keys tend to cluster on a similar set of nodes. Queries are likely to be routed through the network to such a cluster without needing to visit many peers.<ref></ref> However, Freenet does not guarantee that data will be found.
Distributed hash tables use a more structured key-based routing in order to attain both the decentralization of Freenet and Gnutella, and the efficiency and guaranteed results of Napster. One drawback is that, like Freenet, DHTs only directly support exact-match search, rather than keyword search, although Freenet's routing algorithm can be generalized to any key type where a closeness operation can be defined.<ref></ref>
In 2001, four systems&mdash;CAN,<ref name = "Ratnasamy01"></ref> Chord,<ref>Hari Balakrishnan, M. Frans Kaashoek, David Karger, Robert Morris, and Ion Stoica. urltoken Looking up data in P2P systems. In Communications of the ACM, February 2003.</ref> Pastry, and Tapestry&mdash;ignited DHTs as a popular research topic. 
A project called the Infrastructure for Resilient Internet Systems (Iris) was funded by a $12 million grant from the United States National Science Foundation in 2002.<ref></ref>
Researchers included Sylvia Ratnasamy, Ion Stoica, Hari Balakrishnan and Scott Shenker.<ref></ref>
Outside academia, DHT technology has been adopted as a component of BitTorrent and in the Coral Content Distribution Network.
== Properties ==
DHTs characteristically emphasize the following properties:
* Decentralized computing: the nodes collectively form the system without any central coordination.
* Fault tolerance: the system should be reliable (in some sense) even with nodes continuously joining, leaving, and failing.
* Scalability: the system should function efficiently even with thousands or millions of nodes.
A key technique used to achieve these goals is that any one node needs to coordinate with only a few other nodes in the system – most commonly, O(log n) of the n participants (see below) – so that only a limited amount of work needs to be done for each change in membership.
Some DHT designs seek to be secure against malicious participants<ref>Guido Urdaneta, Guillaume Pierre and Maarten van Steen. urltoken A Survey of DHT Security Techniques. ACM Computing Surveys 43(2), January 2011.</ref> and to allow participants to remain anonymity, though this is less common than in many other peer-to-peer (especially file sharing) systems; see anonymous P2P.
Finally, DHTs must deal with more traditional distributed systems issues such as load balancing, data integrity, and performance (in particular, ensuring that operations such as routing and data storage or retrieval complete quickly).
== Structure ==
The structure of a DHT can be decomposed into several main components.<ref>Moni Naor and Udi Wieder. urltoken Novel Architectures for P2P Applications: the Continuous-Discrete Approach. Proc. SPAA, 2003.</ref><ref>Gurmeet Singh Manku. urltoken Dipsea: A Modular Distributed Hash Table . Ph. D. Thesis (Stanford University), August 2004.</ref> The foundation is an abstract keyspace, such as the set of 160-bit strings. A keyspace partitioning scheme splits ownership of this keyspace among the participating nodes. An overlay network then connects the nodes, allowing them to find the owner of any given key in the keyspace.
Once these components are in place, a typical use of the DHT for storage and retrieval might proceed as follows. Suppose the keyspace is the set of 160-bit strings. To index a file with given and in the DHT, the SHA-1 hash of is generated, producing a 160-bit key , and a message is sent to any node participating in the DHT. The message is forwarded from node to node through the overlay network until it reaches the single node responsible for key as specified by the keyspace partitioning. That node then stores the key and the data. Any other client can then retrieve the contents of the file by again hashing to produce and asking any DHT node to find the data associated with with a message . The message will again be routed through the overlay to the node responsible for , which will reply with the stored .
The keyspace partitioning and overlay network components are described below with the goal of capturing the principal ideas common to most DHTs; many designs differ in the details.
=== Keyspace partitioning ===
Most DHTs use some variant of consistent hashing or rendezvous hashing to map keys to nodes. The two algorithms appear to have been devised independently and simultaneously to solve the distributed hash table problem.
Both consistent hashing and rendezvous hashing have the essential property that removal or addition of one node changes only the set of keys owned by the nodes with adjacent IDs, and leaves all other nodes unaffected. Contrast this with a traditional hash table in which addition or removal of one bucket causes nearly the entire keyspace to be remapped. Since any change in ownership typically corresponds to bandwidth-intensive movement of objects stored in the DHT from one node to another, minimizing such reorganization is required to efficiently support high rates of churn (node arrival and failure).
==== Consistent hashing ====
Consistent hashing employs a function <math>\delta(k_1, k_2)</math> that defines an abstract notion of the distance between the keys <math>k_1</math> and <math>k_2</math>, which is unrelated to geographical distance or network latency. Each node is assigned a single key called its identifier (ID). A node with ID <math>i_x</math> owns all the keys <math>k_m</math> for which <math>i_x</math> is the closest ID, measured according to <math>\delta(k_m, i_x)</math>.
For example, the Chord DHT uses consistent hashing, which treats nodes as points on a circle, and <math>\delta(k_1, k_2)</math> is the distance traveling clockwise around the circle from <math>k_1</math> to <math>k_2</math>. Thus, the circular keyspace is split into contiguous segments whose endpoints are the node identifiers. If <math>i_1</math> and <math>i_2</math> are two adjacent IDs, with a shorter clockwise distance from <math>i_1</math> to <math>i_2</math>, then the node with ID <math>i_2</math> owns all the keys that fall between <math>i_1</math> and <math>i_2</math>.
==== Rendezvous hashing ====
In rendezvous hashing, also called highest random weight (HRW) hashing, all clients use the same hash function <math>h()</math> (chosen ahead of time) to associate a key to one of the n available servers.
Each client has the same list of identifiers 
The most common choice, <math>O(\log n)</math> degree/route length, is not optimal in terms of degree/route length tradeoff, but such topologies typically allow more flexibility in choice of neighbors. Many DHTs use that flexibility to pick neighbors that are close in terms of latency in the physical underlying network. In general, all DHTs construct navigable small-world network topologies, which trade-off route length vs. network degree.<ref></ref>
Maximum route length is closely related to diameter: the maximum number of hops in any shortest path between nodes. Clearly, the network's worst case route length is at least as large as its diameter, so DHTs are limited by the degree/diameter tradeoff<ref></ref> that is fundamental in graph theory. Route length can be greater than diameter, since the greedy routing algorithm may not find shortest paths.<ref>Gurmeet Singh Manku, Moni Naor, and Udi Wieder. urltoken "Know thy Neighbor's Neighbor: the Power of Lookahead in Randomized P2P Networks". Proc. STOC, 2004.</ref>
=== Algorithms for overlay networks ===
Aside from routing, there exist many algorithms that exploit the structure of the overlay network for sending a message to all nodes, or a subset of nodes, in a DHT.<ref>Ali Ghodsi. urltoken "Distributed k-ary System: Algorithms for Distributed Hash Tables", . KTH-Royal Institute of Technology, 2006.</ref> These algorithms are used by applications to do overlay multicast, range queries, or to collect statistics. Two systems that are based on this approach are Structella,<ref></ref> which implements flooding and random walks on a Pastry overlay, and DQ-DHT, which implements a dynamic querying search algorithm over a Chord network.<ref></ref>
== Security ==
Because of the decentralization, fault tolerance, and scalability of DHTs, they are inherently more resilient against a hostile attacker than a centralized system.
Open systems for distributed data storage that are robust against massive hostile attackers are feasible.<ref>
Baruch Awerbuch, Christian Scheideler.
"Towards a scalable and robust DHT".
2006.
</ref>
A DHT system that is carefully designed to have Byzantine fault tolerance can defend against a security weakness, known as the Sybil attack, which affects all current DHT designs.<ref>
Maxwell Young; Aniket Kate; Ian Goldberg; Martin Karsten.
 urltoken "Practical Robust Communication in DHTs Tolerating a Byzantine Adversary".
</ref><ref>
Natalya Fedotova; Giordano Orzetti; Luca Veltri; Alessandro Zaccagnini.
"Byzantine agreement for reputation management in DHT-based peer-to-peer networks".
</ref>
Petar Maymounkov, one of the original authors of Kademlia, has proposed a way to circumvent the weakness to the Sybil attack by incorporating social trust relationships into the system design.<ref></ref> The new system, codenamed Tonika or also known by its domain name as 5ttt, is based on an algorithm design known as "electric routing" and co-authored with the mathematician Jonathan Kelner.<ref></ref> Maymounkov has now undertaken a comprehensive implementation effort of this new system. However, research into effective defences against Sybil attacks is generally considered an open question, and wide variety of potential defences are proposed every year in top security research conferences.
== Implementations ==
Most notable differences encountered in practical instances of DHT implementations include at least the following:
* The address space is a parameter of DHT. Several real-world DHTs use 128-bit or 160-bit key space.
* Some real-world DHTs use hash functions other than SHA-1.
* In the real world the key could be a hash of a file's content rather than a hash of a file's name to provide content-addressable storage, so that renaming of the file does not prevent users from finding it.
* Some DHTs may also publish objects of different types. For example, key could be the node and associated data could describe how to contact this node. This allows publication-of-presence information and often used in IM applications, etc. In the simplest case, is just a random number that is directly used as key (so in a 160-bit DHT will be a 160-bit number, usually randomly chosen). In some DHTs, publishing of nodes' IDs is also used to optimize DHT operations.
* Redundancy can be added to improve reliability. The key pair can be stored in more than one node corresponding to the key. Usually, rather than selecting just one node, real world DHT algorithms select suitable nodes, with being an implementation-specific parameter of the DHT. In some DHT designs, nodes agree to handle a certain keyspace range, the size of which may be chosen dynamically, rather than hard-coded.
* Some advanced DHTs like Kademlia perform iterative lookups through the DHT first in order to select a set of suitable nodes and send messages only to those nodes, thus drastically reducing useless traffic, since published messages are only sent to nodes that seem suitable for storing the key ; and iterative lookups cover just a small set of nodes rather than the entire DHT, reducing useless forwarding. In such DHTs, forwarding of messages may only occur as part of a self-healing algorithm: if a target node receives a message, but believes that is out of its handled range and a closer node (in terms of DHT keyspace) is known, the message is forwarded to that node. Otherwise, data are indexed locally. This leads to a somewhat self-balancing DHT behavior. Of course, such an algorithm requires nodes to publish their presence data in the DHT so the iterative lookups can be performed.
* Since on most machines sending messages is much more expensive than local hash table accesses, it makes sense to bundle many messages concerning a particular node into a single batch. Assuming each node has a local batch consisting of at most operations, the bundling procedure is as follows. Each node first sorts its local batch by the identifier of the node responsible for the operation. Using bucket sort, this can be done in , where is the number of nodes in the DHT. When there are multiple operations addressing the same key within one batch, the batch is condensed before being sent out. For example, multiple lookups of the same key can be reduced to one or multiple increments can be reduced to a single add operation. This reduction can be implemented with the help of a temporary local hash table. Finally, the operations are sent to the respective nodes.<ref></ref>
== Examples ==
=== DHT protocols and implementations ===
* Apache Cassandra
* BATON Overlay
* Mainline DHT – standard DHT used by BitTorrent (based on Kademlia as provided by Khashmir)<ref> urltoken Tribler wiki retrieved January 2010.</ref>
*Content addressable network (CAN)
* Chord
* Koorde
* Kademlia
* Pastry
* P-Grid
* Riak
* Tapestry
* TomP2P
* Voldemort
=== Applications using DHTs ===
* BTDigg: BitTorrent DHT search engine
* Codeen: web caching
* Coral Content Distribution Network
* Freenet: a censorship-resistant anonymous network
* GlusterFS: a distributed file system used for storage virtualization
* GNUnet: Freenet-like distribution network including a DHT implementation
* I2P: An open-source anonymous peer-to-peer network
* I2P : serverless secure anonymous email
* IPFS: A content-addressable, peer-to-peer hypermedia distribution protocol
* JXTA: open-source P2P platform
* Oracle Coherence: an in-memory data grid built on top of a Java DHT implementation
* Perfect Dark: a peer-to-peer file-sharing application from Japan
* Retroshare: a Friend-to-friend network<ref> urltoken Retroshare FAQ retrieved December 2011</ref>
* Jami: a privacy-preserving voice, video and chat communication platform, based on a Kademlia-like DHT
* Tox: an instant messaging system intended to function as a Skype replacement
* Twister: a microblogging peer-to-peer platform
* YaCy: a distributed search engine

A distributed hash table (DHT) is a distributed system that provides a lookup service similar to a hash table: Key value pair are stored in a DHT, and any participating node can efficiently retrieve the value associated with a given key. The main advantage of a DHT is that nodes can be added or removed with minimum work around re-distributing keys. Keys are unique identifiers which map to particular values, which in turn can be anything from addresses, to documents, to arbitrary data.<ref name=StoicaEtAl2001></ref> Responsibility for maintaining the mapping from keys to values is distributed among the nodes, in such a way that a change in the set of participants causes a minimal amount of disruption. This allows a DHT to scale to extremely large numbers of nodes and to handle continual node arrivals, departures, and failures.
DHTs form an infrastructure that can be used to build more complex services, such as anycast, cooperative Web cache, distributed file systems, Domain name system, instant messaging, multicast, and also peer-to-peer file sharing and content distribution systems. Notable distributed networks that use DHTs include BitTorrent's distributed tracker, the Coral Content Distribution Network, the Kad network, the Storm botnet, the Tox (protocol), Freenet, the YaCy search engine, and the InterPlanetary File System.