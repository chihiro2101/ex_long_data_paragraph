Network Time Protocol

== History ==
In 1979, network time synchronization technology was used in what was possibly the first public demonstration of Internet services running over a trans-Atlantic satellite network, at the National Computer Conference in New York. The technology was later described in the 1981 Internet Engineering Note (IEN) 173<ref name="ND7CF"></ref> and a public protocol was developed from it that was documented in . The technology was first deployed in a local area network as part of the Hello routing protocol and implemented in the Fuzzball router, an experimental operating system used in network prototyping, where it ran for many years.
Other related network tools were available both then and now. They include the Daytime and Time protocols for recording the time of events, as well as the ICMP Timestamp and IP Timestamp option . More complete synchronization systems, although lacking NTP's data analysis and clock disciplining algorithms, include the Unix daemon timed, which uses an election algorithm to appoint a server for all the clients;<ref name="Y8SkT"></ref> and the Digital Time Synchronization Service (DTSS), which uses a hierarchy of servers similar to the NTP stratum model.
In 1985, NTP version 0 (NTPv0) was implemented in both Fuzzball and Unix, and the NTP packet header and round-trip delay and offset calculations, which have persisted into NTPv4, were documented in . Despite the relatively slow computers and networks available at the time, accuracy of better than 100 milliseconds was usually obtained on Atlantic spanning links, with accuracy of tens of milliseconds on Ethernet networks.
In 1988, a much more complete specification of the NTPv1 protocol, with associated algorithms, was published in . It drew on the experimental results and clock filter algorithm documented in and was the first version to describe the client-server and peer-to-peer modes. In 1991, the NTPv1 architecture, protocol and algorithms were brought to the attention of a wider engineering community with the publication of an article by David L. Mills in the IEEE Transactions on Communications.<ref name="AMYJK"></ref>
In 1989, was published defining NTPv2 by means of a state machine, with pseudocode to describe its operation. It introduced a management protocol and Digital signature scheme which have both survived into NTPv4, along with the bulk of the algorithm. However the design of NTPv2 was criticized for lacking formal correctness by the DTSS community, and the clock selection procedure was modified to incorporate Marzullo's algorithm for NTPv3 onwards.<ref name="EADP0"></ref>
In 1992, defined NTPv3. The RFC included an analysis of all sources of error, from the Master clock down to the final client, which enabled the calculation of a metric that helps choose the best server where several candidates appear to disagree. Broadcast mode was introduced.
In subsequent years, as new features were added and algorithm improvements were made, it became apparent that a new protocol version was required.<ref name="MillsES"></ref> In 2010, was published containing a proposed specification for NTPv4. The protocol has significantly moved on since then, and as of 2014, an updated RFC has yet to be published.<ref name="E4akm"></ref> Following the retirement of Mills from the University of Delaware, the reference implementation is currently maintained as an open source project led by Harlan Stenn.<ref name="jZjhj"></ref><ref name="MShrI"></ref>
== Clock strata ==
NTP uses a hierarchical, semi-layered system of time sources. Each level of this hierarchy is termed a stratum and is assigned a number starting with zero for the reference clock at the top. A server synchronized to a stratum n server runs at stratum n + 1. The number represents the distance from the reference clock and is used to prevent cyclical dependencies in the hierarchy. Stratum is not always an indication of quality or reliability; it is common to find stratum 3 time sources that are higher quality than other stratum 2 time sources. A brief description of strata 0, 1, 2 and 3 is provided below.
; Stratum 0
: These are high-precision timekeeping devices such as atomic clocks, GPS or other radio clocks. They generate a very accurate pulse per second signal that triggers an interrupt and timestamp on a connected computer. Stratum 0 devices are also known as reference clocks. NTP servers cannot advertise themselves as stratum 0. A stratum field set to 0 in NTP packet indicates an unspecified stratum.<ref name="GPf8p">RFC 5905, p. 21</ref>
; Stratum 1
: These are computers whose system time is synchronized to within a few microseconds of their attached stratum 0 devices. Stratum 1 servers may peer with other stratum 1 servers for sanity check and backup.<ref name="cisco"></ref> They are also referred to as primary time servers.<ref name="summary" /><ref name="faq" />
; Stratum 2
: These are computers that are synchronized over a network to stratum 1 servers. Often a stratum 2 computer queries several stratum 1 servers. Stratum 2 computers may also peer with other stratum 2 computers to provide more stable and robust time for all devices in the peer group.
; Stratum 3
: These are computers that are synchronized to stratum 2 servers. They employ the same algorithms for peering and data sampling as stratum 2, and can themselves act as servers for stratum 4 computers, and so on.
The upper limit for stratum is 15; stratum 16 is used to indicate that a device is unsynchronized. The NTP algorithms on each computer interact to construct a Bellman-Ford shortest-path spanning tree, to minimize the accumulated round-trip delay to the stratum 1 servers for all the clients.<ref name="Mills2010" />
In addition to stratum, the protocol is able to identify the synchronization source for each server in terms of reference identifier (refid).
</math>,
where
:t<sub>0</sub> is the client's timestamp of the request packet transmission,
:t<sub>1</sub> is the server's timestamp of the request packet reception,
:t<sub>2</sub> is the server's timestamp of the response packet transmission and
:t<sub>3</sub> is the client's timestamp of the response packet reception.<ref name="Mills2010" />
To derive the expression for the offset, note that for the request packet,
:<math>t_0 + \theta + \delta/2 = t_1</math>
and for the response packet,
:<math>t_3 + \theta - \delta/2 = t_2</math>
Solving for θ yields the definition of the time offset.
The values for θ and δ are passed through filters and subjected to statistical analysis. Outliers are discarded and an estimate of time offset is derived from the best three remaining candidates. The clock frequency is then adjusted to reduce the offset gradually, creating a feedback loop.<ref name="Mills2010"></ref>
Accurate synchronization is achieved when both the incoming and outgoing routes between the client and the server have symmetrical nominal delay. If the routes do not have a common nominal delay, a systematic bias exists of half the difference between the forward and backward travel times.<ref name="iL6pp"></ref>
== Software implementations ==
=== Reference implementation ===
The NTP reference implementation, along with the protocol, has been continuously developed for over 20 years. Backwards compatibility has been maintained as new features have been added. It contains several sensitive algorithms, especially to discipline the clock, that can misbehave when synchronized to servers that use different algorithms. The software has been ported to almost every computing platform, including personal computers. It runs as a daemon called ntpd under Unix or as a service under Windows. Reference clocks are supported and their offsets are filtered and analysed in the same way as remote servers, although they are usually polled more frequently.<ref name="Mills2010" /> This implementation was audited in 2017, finding numerous potential security issues.<ref name="jAgTl"></ref>
=== SNTP ===
Simple Network Time Protocol (SNTP) is a less complex implementation of NTP, using the same protocol but without requiring the storage of state over extended periods of time.<ref name="Q3isq"></ref> It is used in some embedded systems and in applications where full NTP capability is not required.<ref name="WaRPD"></ref>
=== Windows Time ===
All Microsoft Windows versions since Windows 2000 include the Windows Time service (W32Time),<ref name="ciu7z"></ref> which has the ability to synchronize the computer clock to an NTP server.
W32Time was originally implemented for the purpose of the Kerberos version 5 authentication protocol, which required time to be within 5 minutes of the correct value to prevent replay attacks. The version in Windows 2000 and Windows XP only implements SNTP, and violates several aspects of the NTP version 3 standard.<ref name="gn3Ev"></ref>
Beginning with Windows Server 2003 and Windows Vista, a compliant implementation of NTP is included.<ref name="AD2ab"></ref> Microsoft states that W32Time cannot reliably maintain time synchronization with one second accuracy.<ref name="kb939322"></ref> If higher accuracy is desired, Microsoft recommends using a newer version of Windows or different NTP implementation.<ref name="ihlx1"></ref>
Windows 10 and Windows Server 2016 support 1&nbsp;ms time accuracy under certain operating conditions.<ref name="FvW7f"></ref><ref name="kb939322" />
=== OpenNTPD ===
In 2004, Henning Brauer presented OpenNTPD, an NTP implementation with a focus on security and encompassing a privilege separated design. Whilst it is aimed more closely at the simpler generic needs of OpenBSD users, it also includes some protocol security improvements while still being compatible with existing NTP servers. A portable version is available in Linux package repositories.
=== Ntimed ===
A new NTP client, ntimed, was started by Poul-Henning Kamp in 2014.<ref name="F7zIq"></ref> The new implementation is sponsored by the Linux Foundation as a replacement for the reference implementation, as it was determined to be easier to write a new implementation from scratch than to reduce the size of the reference implementation. Although it has not been officially released, ntimed can synchronize clocks reliably.<ref name="HA4P8"></ref>
=== NTPsec ===
NTPsec is a fork of the reference implementation that has been systematically security-hardened. The fork point was in June 2015 and was in response to a rash of compromises in 2014. The first production release shipped in October 2017.<ref name="TLIYY"></ref> Between removal of unsafe features, removal of support for obsolete hardware, and removal of support for obsolete Unix variants, NTPsec has been able to pare away 75% of the original codebase, making the remainder more auditable.<ref name="Liska2016"></ref> A 2017 audit of the code showed eight security issues, including two that were not present in the original reference implementation, but NTPsec did not suffer from eight other issues that remained in the reference implementation.<ref name="5CF55"></ref>
=== chrony ===
chrony comes by default in Red Hat distributions<ref name="Q91Af"></ref> and is available in the Ubuntu repositories.<ref name="pNN5k"></ref> chrony is aimed at ordinary computers, which are unstable, go into sleep mode or have intermittent connection to the Internet.<ref name="Both2018"></ref> chrony is also designed for virtual machines, a much more unstable environment. It is characterized by low resource consumption (cost) and supports Precision Time Protocol hardware for greater timestamp precision.<ref name="Ocilw"></ref> It has two main components: chronyd, a daemon that is executed when the computer starts, and chronyc, a command line interface to the user for its configuration. It has been evaluated as very safe and with just a few incidents,<ref name="tN0aV"></ref> its advantage is the versatility of its code, written from scratch to avoid unnecessary complexity.<ref name="kYgFj"></ref> chrony is available under GNU General Public License#Version 2, was created by Richard Curnow in 1997 and is currently maintained by Miroslav Lichvar.<ref name="jR9Jg"></ref>
== Leap seconds ==
On the day of a leap second event, ntpd receives notification from either a configuration file, an attached reference clock, or a remote server. Although the NTP clock is actually halted during the event, because of the requirement that time must appear to be monotonically increasing, any processes that query the system time cause it to increase by a tiny amount, preserving the order of events. If a negative leap second should ever become necessary, it would be deleted with the sequence 23:59:58, 00:00:00, skipping 23:59:59.<ref name="7hQhm"></ref>
An alternative implementation, called leap smearing, consists in introducing the leap second incrementally during a period of 24 hours, from noon to noon in UTC time. This implementation is used by Google (both internally and on their public NTP servers) and by Amazon AWS.<ref name="kYj2y"></ref>
== Security concerns ==
Only a few other security problems have been identified in the reference implementation of the NTP codebase, but those that appeared in 2009 were cause for significant concern.<ref name="8pJKT"></ref><ref name="DoZBy"></ref> The protocol has been undergoing revision and review over its entire history. The codebase for the reference implementation has undergone security audits from several sources for several years.<ref name="ZD0x6"></ref>
A stack buffer overflow exploit was discovered and patched in 2014.<ref name="m0CJK"></ref> Apple was concerned enough about this vulerability that it used its auto-update capability for the first time.<ref name="zg08P"></ref> Some implementation errors are basic, such as a missing return statement in a routine, that can lead to unlimited access to systems that are running some versions of NTP in the root daemon. Systems that do not use the root daemon, such as BSD, are not subject to this flaw.<ref name="PW78Z"></ref>
A 2017 security audit of three NTP implementations, conducted on behalf of the Linux Foundation's Core Infrastructure Initiative, suggested that both NTP<ref name="VBrX5"> urltoken NTP SecurityNotice Page </ref><ref name="T0ZbX"> urltoken NVD NIST Product Search NTP</ref> and NTPsec<ref name="YK5og"> urltoken NVD NIST Product Search NTPsec </ref> were more problematic than Chrony<ref name="rPdf5"> urltoken NVD NIST Product Search Chrony </ref> from a security standpoint.<ref name="nPXeu"></ref>
NTP servers can be susceptible to man-in-the-middle attacks unless packets are cryptographically signed for authentication.<ref name="cGifv"></ref> The computational overhead involved can make this impractical on busy servers, particularly during denial of service attacks.<ref name="7a6Kk"></ref> NTP message spoofing from a man-in-the-middle attack can be used to move clocks on client computers and allow a number of attacks based on bypassing of cryptographic key expiration.<ref name="OcBCA"></ref> Some of the services affected by fake NTP messages identified are TLS, DNSSEC, various caching schemes (such as DNS cache), BGP, Bitcoin and a number of persistent login schemes.<ref name="CjQpl"></ref><ref name="PglM9"></ref>
NTP has been used in distributed denial of service attacks.<ref name="ElmaH"></ref><ref name="Eb0sO"></ref> A small query is sent to an NTP server with the return address spoofed to be the target address. Similar to the DNS amplification attack, the server responds with a much larger reply that allows an attacker to substantially increase the amount of data being sent to the target. To avoid participating in an attack, NTP server software can be upgraded or servers can be configured to ignore external queries.<ref name="wkYHy"></ref>

The Network Time Protocol (NTP) is a networking protocol for clock synchronization between computer systems over packet-switched, variable-latency data networks. In operation since before 1985, NTP is one of the oldest Internet protocols in current use. NTP was designed by David L. Mills of the University of Delaware.
NTP is intended to synchronize all participating computers to within a few milliseconds of Coordinated Universal Time (UTC).<ref name="Mills2010" /> It uses the intersection algorithm, a modified version of Marzullo's algorithm, to select accurate time servers and is designed to mitigate the effects of variable network latency. NTP can usually maintain time to within tens of milliseconds over the public Internet, and can achieve better than one millisecond accuracy in local area networks under ideal conditions. Asymmetric routes and network congestion can cause errors of 100&nbsp;ms or more.<ref name="summary"></ref><ref name="faq"></ref>
The protocol is usually described in terms of a client-server model, but can as easily be used in peer-to-peer relationships where both peers consider the other to be a potential time source.<ref name="Mills2010" /> Implementations send and receive timestamps using the User Datagram Protocol (UDP) on port number 123.<ref name="qNvGW"></ref><ref name="b66wS"></ref> They can also use broadcasting or multicasting, where clients passively listen to time updates after an initial round-trip calibrating exchange.<ref name="faq" /> NTP supplies a warning of any impending leap second adjustment, but no information about local time zones or daylight saving time is transmitted.<ref name="summary" /><ref name="faq" />
The current protocol is version 4 (NTPv4), which is a proposed standard as documented in . It is backward compatible with version 3, specified in .