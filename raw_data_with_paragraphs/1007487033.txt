Rogue (video game)

==Gameplay==
In Rogue, the player assumes the typical role of an adventurer of early fantasy role-playing games. The game starts at the uppermost level of an unmapped dungeon with myriad monsters and treasures. The goal is to fight one's way to the bottom level, retrieve the Amulet of Yendor ("Rodney" spelled backwards), then ascend to the surface.<ref name="edge"></ref> Monsters in the levels become progressively more difficult to defeat. Until the Amulet is retrieved, the player cannot return to earlier levels.
===User interface===
In the original text-based versions, all aspects of the game, including the dungeon, the player character, and monsters, are represented by letters and symbols within the ASCII character set. Monsters are represented by capital letters (such as <code><big>Z</big>,</code> for zombie), and accordingly there are twenty-six varieties. This type of display makes it appropriate for a Computer terminal. Later ports of Rogue apply Extended ASCII to the text user interface or replace it with graphical tiles.
The HJKL keys (h, left; j, down; k, up; and l, right) are the same as the cursor control keys in the vi editor. Other game actions also use single keystrokes—q to quaff a potion, w to wield a weapon, e to eat some food, etc. In the DOS version, the Arrow keys specify movement, and the fast-move keys (H, J, K, and L) are supplanted by use of the scroll lock key.
Each dungeon level consists of a grid of three rooms by three rooms (potentially); dead end hallways sometimes appear where rooms would be expected. Lower levels can also include a maze in the place of a room. Unlike most adventure games of the time of the original design, the dungeon layout and the placement of objects within are Random dungeon.
==Development==
===At UC Santa Cruz===
The concept of Rogue originated with Michael Toy and Glenn Wichman.<ref></ref> Toy grew up in Livermore, California, where his father was a nuclear scientist. Once a year, the father's workplace allowed their employees family to visit, which included allowing them to use the facility's mainframe system to play games. Toy took interest in the text-based Star Trek game (1971), which represented space combat through characters on screen, and required players to make strategic decisions each turn. Toy took to learn programming and recreate this game on other computer systems that he could access, including the Processor Technology Sol-20 and the Atari 400.<ref name="chaddock chp2"></ref>
Toy subsequently enrolled in computer science at the University of California, Santa Cruz (UCSC) in the late 1970s. Working first on UCSC's PDP-11 and then its VAX-11, Toy began exploring what games were available over ARPANET, the predecessor of the current Internet. One game that intrigued him was Colossal Cave Adventure (also known as Adventure) (1976) by William Crowther and Don Woods. Adventure, considered the first text-based adventure game, challenged the player to explore a cave system through descriptions given by the computer and commands issued by the player. Toy was impressed by the game and started writing his own.<ref name="chaddock chp2"/>
Toy soon met Wichman, another student at UCSC who was also writing his own adventure game. Wichman had created his own variations on traditional role-playing games such as Dungeons & Dragons while growing up. Wichman chose UCSC specifically to study on game design as to become a board game developer, and this led him into the computer sciences to get the opportunity to play and develop games. The two became friends, shared an apartment, and challenged each other with their own adventure game creations. Of the two, Toy was more proficient at coding, while Wichman had a better sense of the design of these games. Toy and Wichman soon found that most adventure games suffered from a lack of replayability, in that the game did not change on separate playthroughs.<ref name="chaddock chp2"/><ref name="Wichman"></ref>
Around this time, ca. 1980, BSD Unix had started to gain a foothold as the operating system for many of the University of California's campuses. One element of the BSD distribution at this point included the curses programming library by Ken Arnold. curses enabled a programmer to place characters at any point on a terminal, effectively allowing for "graphical" interfaces.<ref name="chaddock chp2"/> When Toy saw this library, he and Wichman quickly realized the potential for it. After crafting a few games using curses to learn the library, they came up with the idea of an adventure game in the flavor of Dungeons & Dragons but to address their concerns with the static nature of adventure games, wanted to include elements that would change every time the game was played. The two came up with a narrative, that of an adventurer setting out to explore and find treasures in the Dungeons of Doom, specifically the Amulet of Yendor (the name "Rodney" spelled backwards, which they envisioned as renowned wizard in the games narration).<ref name="chaddock chp2"/> Wichman came up with the name Rogue, based on the idea that unlike the party-based systems of Dungeons & Dragons, the player's character was going at this alone. They also wanted to make sure the name was short to make it simple to type out on command lines.<ref name="chaddock chp2"/><ref name="Wichman"/>
As Toy was more proficient at programming, he led the development of the game in the C language which generally produced fast effective code. Wichman learned the language from Toy as they went along while providing significant input on the design of game.<ref name="chaddock chp2"/><ref name="Wichman"/> The first two major aspects of the game developed was the method of displaying the dungeon on screen to the player, and how to generate the dungeon in a random manner. Limited by choices of what a terminal could display, they stuck to ASCII-based characters, such as <code>.</code> for empty floor space, <code>+</code> for doors, and <code>|</code> and <code>-</code> for walls of the dungeon. They also opted to use the "at" symbol (<code>@</code>) to represent the player, considering this showed the player "where they're at".<ref name="chaddock chp2"/> For the dungeon, they found initial attempts at purely random generation to be weak, in some cases having a stairway ending up in a room inaccessible to players. They found a solution through procedural generation, where each level would start on the idea of a 3x3 tic tac toe grid, with each room of various size occupying one space in this grid, and then creating the hallways to connect the rooms.<ref name="chaddock chp2"/> Once they could have their character move about these randomly created dungeons, they then added equipment, magic items, and monsters. With magic items, they wanted the effects of these items to be a mystery on each run through, and thus would initially present the items to the player only by a descriptor such as by color, and only later in the game give the true name of the item once the player experimented or used another means to identify the item.<ref name="chaddock chp2"/> For monsters, they wanted to have more advanced intelligence routines as the player got to deeper depths of the dungeons, but had started running into memory limits on the VAX-11, and simply made the monsters stronger with more health to pose more of a challenge.<ref name="chaddock chp2"/><ref name="edge"/>
The two started testing the game with other students at UCSC, finding that despite the limited graphics, players were filling the gaps with their own imagination. Playtester feedback helped them to improve the procedural generation routines to balance the game's challenge.<ref name="chaddock chp2"/><ref name="edge"/> One element that fell out from playtesting was the use of permadeath. Toy wanted to move away from the notion of simply learning the right sequence of steps to complete within adventure games, and instead make the player focus on finding the right moves to avoid the character's death at that moment;<ref name="chaddock chp2"/> Wichman later called this idea "consequence persistence".<ref></ref> Initially, a Rogue game had to be completed in one sitting, but by demand of playtesters, Toy and Wichman added the ability to save the state of the game, so that players could continue a game across sessions. They soon found players were "save scumming", reloading the game from the save file, an approach counter to their design goals. They changed this so that the save file was erased upon reloading the game, thus making a character's death effectively permanent.<ref name="chaddock chp2"/> They subsequently added a scoreboard feature that let players rank their progress with others, rewarding players with more points for surviving as deep as possible into the dungeons and making the Amulet of Yendor a lucrative goal.<ref name="chaddock chp2"/>
Around 1982, Toy's attention to Rogue and computer games caused him to suffer poor academic performance, and he was kicked out of the school, shortly finding employment at University of California, Berkeley (UCB) in their computer lab. Toy took the Rogue code with him to continue its development.<ref name="chaddock chp2"/> Wichman, still enrolled at UCSC, continued to help develop Rogue for a time, such as adding armor elements, but the logistics of working over the distance made it difficult for him to keep up, and he let Toy fully take over development.<ref name="chaddock chp2"/><ref name="Wichman"/>
===At UC Berkeley===
Prior to Toy's arrival at UCB, Ken Arnold had gotten to play Rogue, which had been distributed as an executable across many of the UC campuses. Though impressed with the game, he expressed frustration at the inefficient means the game updated the screen via his curses library over a modem line.<ref name="chaddock chp3"></ref> He had ideas for how to fix it, but at this point Toy and Wichman had opted not to release the code.<ref name="chaddock chp3"/>
When Toy arrived at UCB in 1982, he sought out Arnold to get insight into the nature of how the curses library worked. After the two got to know each other, Toy allowed him access to Rogues source code.<ref name="chaddock chp3"/> In addition to helping to improve the interface and rendering of the game, Arnold helped to improve the procedural generation aspects of the game.<ref name="chaddock chp3"/>
With its popularity on the UCB servers, Rogue was selected as one of the game titles included in the 1983 distribution of 4.2 BSD, which spread across ARPANET and quickly gained popularity among colleges and facilities with access to this hardware. Among its fans included UNIX's co-developer Ken Thompson working at Bell Labs; Dennis Ritchie had joked at the time that Rogue was "the biggest waste of CPU cycles in history".<ref name="chaddock chp3"/> Rogues distribution in 4.2 BSD did not include its source code, so after Toy and Arnold separately left UCB, they took the code with them, making it difficult for anyone to build off it. Rogue source was eventually added under a BSD licenses within 4.3 BSD in 1986, putting it into the open source.<ref name="chaddock chp5"></ref>
===At A.I. Design===
Toy left UCB sometime before 1984 and took a consulting position with Olivetti, an Italian typewriter company that at the time were starting development of their own computer based on the IBM Personal Computer (IBM PC) operating system.<ref name="chaddock chp3"/> There, he met one of Olivetti's computer system administrators, Jon Lane. Lane had previously seen the popularity of Rogue among the United States location he managed and had played the game himself along with Ritchie's observations on Rogue.<ref name="edge"/> Upon meeting Toy, Lane proposed the idea of porting Rogue to the IBM PC as a commercial product, which Toy agreed. They founded the company A.I. Design to port and market the game. Though Toy's source code was necessary for the porting, Lane had to redevelop many of the routines for the game's interface. Lane took advantage of the more graphical Code page 437 character set on PC to expand the number of symbols to represent the dungeon, such as using a happy-face <code>☺</code> for the player-character. They also took steps to avoid potential copyright issues with TSR, the company that owned Dungeons & Dragons at that time, by changing the names of monsters like kobolds that were unique to that game.<ref name="chaddock chp3"/><ref name="edge"/>
Toy and Lane initially funded the publishing, distribution, and promotion of the IBM PC version themselves, and though they continued to gain sales, they were only able to break even as they lacked the power of a larger distributor. Around 1984, Robert Borch, the vice president of publishing at Epyx discovered that Rogue had become popular by several of Epyx's employees and that they suggested that Epyx should help fund ports to other systems. Though Borch felt there was niche appeal to the game, he followed this advice and contracted A.I. Design to port the game to the Apple Macintosh and Commodore Amiga upon which Epyx would take over distribution and marketing.<ref name="chaddock chp3"/>
Toy obtained a Macintosh and took the lead in porting the game to that system. Both Toy and Lane recognized that they could implement improved graphics with the Macintosh version, but neither had art skills to make the icons. Toy reached out to Wichman to help with these graphics. Wichman was initially cautious due to the fact that his credit for Rogue in the PC version had been cast as a "contribution" equal to the UCSC playtesters rather than as equal to Toy, Arnold, or Lane.<ref name="chaddock chp3"/> However, he agreed to help and joined A.I. Design. Much of the Macintosh version was developed in concert by Toy, Wichman, and Lane in a cabin at the Squaw Valley Ski Resort.<ref name="chaddock chp3"/> Following this, Epyx requested that Wichman lead the development of the Atari ST version, with the company providing Wichman a system to work on. This work occurred alongside Toy's work on the Amiga version. Wichman enlisted help from an Epyx in-house artist, Michael Kosaka, to create the art on the Atari ST version.<ref name="chaddock chp3"/> Epyx would also fund A.I. Design to port the game to other systems including the TRS-80 Color.<ref name="Wichman"/>
Borch recognized the difficulty in marketing Rogue through traditional methods compared to other games on the market at that time, and opted to push the title through software catalogs rather than retail channels. Though it sold well initially, Rogues sales quickly declined and was considered a commercial flop. Besides the competition from more graphically-interesting games, Wichman attributed the failure to the fact that the commercial version of Rogue was essentially the same game previously offered for free via BSD and did not pose a new challenge.<ref name="chaddock chp3"/> Epyx eventually went bankrupt in 1989, and A.I. Design disbanded. None of Toy, Wichman, Arnold, or Lane profited greatly from Rogue, though they became renowned in the industry for their participation on the game.<ref name="chaddock chp3"/>
===Other ports===
In 1988, the budget software publisher Mastertronic released a commercial port of Rogue for the Amstrad CPC, Commodore 64, Atari 8-bit,<ref></ref> and ZX Spectrum computers.<ref> urltoken Rogue by Mastertronic from World of Spectrum</ref>
Numerous clones exist for modern operating systems such as Microsoft Windows,<ref> urltoken Rogue for Windows from Prankster.com</ref> Mac OS X,<ref> urltoken Rogue for OS X from SourceForge</ref> Palm OS,<ref> urltoken Roguelikes for PalmOS from SourceForge</ref> Linux,<ref name="sauce"> with various versions of Rogue</ref> BSD OSs,<ref name="sauce" /> and iOS.<ref> urltoken Classic Dungeon Crawler Rogue Comes to the iPhone from TouchArcade.com</ref> It is even included in the base distribution of NetBSD and DragonflyBSD.
<gallery widths="200px" heights="130px">
File:4.3 BSD UWisc VAX Emulation LS.png|BSD from the University of Wisconsin, circa 1987. Rogue is shown in "/usr/games"
File:4.3 BSD UWisc VAX Emulation Rogue Manual.png|4.3 BSD displaying the man page for Rogue
</gallery>
==Automated play==
Because the input and output of the original game is over a terminal interface, it is relatively easy in Unix to redirect output to another program. One such program, Rog-O-Matic, was developed in 1981 to play and win the game, by four graduate students in the Computer Science Department at Carnegie-Mellon University in Pittsburgh: Andrew Appel, Leonard Harney, Guy Jacobson and Michael Loren Mauldin.<ref></ref>
Ken Arnold said that he liked to make "sure that every subsequent version of rogue had a new feature in it that broke Rogue-O-Matic."<ref name="gamasutra history"></ref> Nevertheless, it remains a noted study in expert system design and led to the development of other game-playing programs, typically called "bots". Some of these bots target other roguelikes, in particular Angband.<ref name="angborg"></ref>
==Reception==
In March 1984, Jerry Pournelle named the version of Rogue for the IBM PC as his "game of the month", describing it as "a real time trap. I found myself thinking 'just one more try' far too often".<ref name="pournelle198403"></ref> The game was reviewed in 1986 in Dragon #112 by Hartley and Pattie Lesser in the "Role of Computers" column.<ref name="Dragon112"></ref> In a subsequent column, the reviewers gave the IBM and Mac versions of the game 3½ out of 5 stars.<ref name="Dragon126"></ref> Compute! favorably reviewed Epyx's Amiga version as improving on the text-based original, stating that "the game will give you many hours of gaming fun".<ref name="stumpf198701"></ref> In 2009, Rogue was named #6 on the "Ten Greatest PC Games Ever" list by PC World.<ref name="pc_world"></ref>
==Legacy==
Because of Rogues popularity at colleges in the early 1980s,<ref name="1Up50"></ref> other users sought to expand or create similar games to Rogue. However, as neither Toy, Wichman, nor Arnold released the source code of the game, these efforts generally required the programmers to craft the core game elements from scratch to mimic Rogue. Though there were multiple titles that tried this, the two most significant ones were Moria (1983) and Hack (1982). Both games spawned a family of improved versions and clones over the next several years, leading to a wide number of games in a similar flavor. These games, which generally feature turn-based exploration and combat in a high fantasy setting in a procedurally-generated dungeon and employing permadeath, are named roguelike games in honor of Rogues impact.<ref name="gamasutra history"/> Most of the graphical interface conventions used in Rogue were reused within these other roguelikes, such as the use of <code>@</code> to represent the player-character.<ref name="gamasutra history"/>
Toy, Wichman, and Arnold reunited onstage for the first time in 30 years in an event called "Roguelike Celebration" at San Francisco in 2016.<ref></ref>
The gameplay mechanics of Rogue were influential in the creation of Torneko no Daibōken: Fushigi no Dungeon, the very first game in the Mystery Dungeon series by Chunsoft.
==References==
==External links==
<!--======================== ============================
 | PLEASE BE CAUTIOUS IN ADDING MORE LINKS TO THIS ARTICLE. Wikipedia |
 | is not a collection of links nor should it be used for advertising. |
 | |
 | Excessive or inappropriate links WILL BE DELETED. |
 | See Wikipedia:External links & Wikipedia:Spam for details. |
 | |
 | If there are already plentiful links, please propose additions or |
 | replacements on this article's discussion page, or submit your link |
 | to the relevant category at the Open Directory Project (dmoz.org) |
 | and link back to that category using the template. |
 ======================= =============================-->
* 
* 
* 
* urltoken The History of Rogue: Have @ You, You Deadly Z's from Gamasutra by Bill Loguidice and Matt Barton
* urltoken Rogue 1984 – The DOS Game, the History, the Science
* urltoken Rogue Central @ coredumpcentral.org Information, documentation, screenshots, and various versions for download and online play.
* urltoken Michael Toy, Glenn Wichman, and Ken Arnold panel at the 2016 Roguelike Celebration

Rogue (also known as Rogue: Exploring the Dungeons of Doom) is a dungeon crawling video game by Michael Toy and Glenn Wichman and later contributions by Ken Arnold. Rogue was originally developed around 1980 for Unix-based mainframe systems as a freely-distributed executable (public domain software).<ref> urltoken 30.rogue/paper.pdf on freebsd.org "The public domain version of rogue now distributed with Berkeley UNIX "</ref> It was later included in the official Berkeley Software Distribution 4.2 operating system (4.2BSD). Commercial ports of the game for a range of personal computers were made by Toy, Wichman, and Jon Lane under the company A.I. Design and financially supported by the Epyx software publishers. Additional ports to modern systems have been made since by other parties using the game's now-open source code.
In Rogue, players control a character as they explore several levels of a dungeon seeking the Amulet of Yendor located in the dungeon's lowest level. The player-character must fend off an array of monsters that roam the dungeons. Along the way, they can collect treasures that can help them offensively or defensively, such as weapons, armor, potions, scrolls, and other magical items. Rogue is turn-based; taking place on a square grid represented in ASCII or other fixed character sets, allowing players to have time to determine the best move to survive. Rogue implements permadeath as a design choice to make each action by the player meaningful: should the player-character lose all their health from combat or other means, the character is dead, and the player must restart a brand new character and cannot reload from a saved state. The dungeon levels, monster encounters, and treasures are procedural generation on each playthrough, so that no game is the same as a previous one.
Rogue was inspired by text-based computer games such as the 1971 Star Trek game and Colossal Cave Adventure released in 1976, along with the high fantasy setting from Dungeons & Dragons. Toy and Wichman, both students at University of California Santa Cruz, worked together to create their own text-based game but looked to incorporate elements of procedural generation to create a new experience each time the user played the game. Toy later worked at University of California Berkeley where he met Arnold, the lead developer of the curses programming library that Rogue was dependent on to mimic a graphical display. Arnold helped Toy to optimize the code and incorporate additional features to the game. The commercial ports were inspired when Toy met Lane while working for the Olivetti company, and Toy engaged with Wichman again to help with designing graphics and various ports.
Rogue became popular in the 1980s among college students and other computer-savvy users in part due to its inclusion in 4.2BSD. It inspired programmers to develop a number of similar titles such as Hack (1982) and Moria (1983), though as Toy, Wichman, and Arnold had not released the source code at this time, these new games introduced different variations atop Rogue. A long lineage of games grew out from these titles. While Rogue was not the first dungeon-crawling game with procedural generation features, it introduced the subgenre of roguelike RPG procedurally generated dungeon crawlers with Dungeons & Dragons-like items (armor, weapons, potions, and magic scrolls) that also had permadeath (permanent death) and an overhead graphical view; albeit via ASCII drawings, as opposed to text descriptions in natural language of Colossal Cave Adventure and the original Zork games.