Cisco IOS

== History ==
The IOS network operating system was developed in the 1980s for routers that had only 256&nbsp;kB memory and low CPU processing power. Through modular extensions IOS has been adapted to increasing hardware capabilities and new networking protocols.<ref></ref> When IOS was developed, Cisco Systems' main product line were routers. The company acquired a number of young companies that focused on network switches, such as the inventor of the first Ethernet switch Kalpana, and as a result Cisco switches did not run the IOS. The Cisco Catalyst series would for some time run the CatOS.<ref></ref> In early modular chassis network switches from Cisco, modules with layer 3 routing functionalities were separate devices that ran IOS, while the layer 2 switch modules ran CatOS. Cisco eventually introduced the native mode for chassis, so that they only run one operating system. For the Nexus switches Cisco developed NX-OS, which is similar to IOS,<ref></ref> except that it is Linux-based.<ref></ref>
==Command-line interface==
The IOS command-line interface (CLI) provides a fixed set of multiple-word commands. The set available is determined by the "mode" and the privilege level of the current user. "Global configuration mode" provides commands to change the system's configuration, and "interface configuration mode" provides commands to change the configuration of a specific interface. All commands are assigned a privilege level, from 0 to 15, and can only be accessed by users with the necessary privilege. Through the CLI, the commands available to each privilege level can be defined.
Most builds of IOS include a Tcl interpreter. Using the embedded event manager feature, the interpreter can be scripted to react to events within the networking environment, such as interface failure or periodic timers.
Available command modes include:<ref></ref>
* User EXEC Mode
* Privileged EXEC Mode
* Global Configuration Mode
* ROM Monitor Mode
* Setup Mode
* More than 100 configuration modes and submodes.
== Architecture ==
Cisco IOS has a monolithic architecture, owing to the limited hardware resources of routers and switches in the 1980s. This means that all processes have direct hardware access to conserve CPU processing time. There is no memory protection between processes and IOS has a run to completion scheduler, which means that the kernel does not pre-empt a running process. Instead the process must make a kernel call before other processes get a chance to run. IOS considers each process a single thread and assigns it a priority value, so that high priority processes are executed on the CPU before queued low priority processes, but high priority processes can not interrupt running low priority processes.<ref></ref>
The Cisco IOS monolithic kernel does not implement memory protection for the data of different processes. The entire physical memory is mapped into one virtual address space. The Cisco IOS kernel does not perform any memory paging or swapping. Therefore the addressable memory is limited to the physical memory of the network device on which the operating system is installed. IOS does however support aliasing of duplicated virtual memory contents to the same physical memory. This architecture was implemented by Cisco in order to ensure system performance and minimize the operational overheads of the operating system.<ref></ref>
The disadvantage of the IOS architecture is that it increases the complexity of the operating system, data corruption is possible as one process can write over the data of another, and one process can destabilize the entire operating system or even cause a software-forced crash. In the event of an IOS crash, the operating system automatically reboots and reloads the saved configuration.<ref></ref>
== Routing ==
In all versions of Cisco IOS, Routing and forwarding (switching) are distinct functions. Routing and other protocols run as Cisco IOS processes and contribute to the Routing Information Base (RIB). This is processed to generate the final IP forwarding table (FIB, Forwarding Information Base), which is used by the forwarding function of the router. On router platforms with software-only forwarding (e.g., Cisco 7200), most traffic handling, including access control list filtering and forwarding, is done at interrupt level using Cisco Express Forwarding (CEF) or dCEF (Distributed CEF). This means IOS does not have to do a process context switch to forward a packet. Routing functions such as OSPF or BGP run at the process level. In routers with hardware-based forwarding, such as the Cisco 12000 series, IOS computes the FIB in software and loads it into the forwarding hardware (such as an ASIC or network processor), which performs the actual packet forwarding function.
== Interface descriptor block ==
An Interface Descriptor Block, or simply IDB, is a portion of memory or Cisco IOS internal data structure that contains information such as the IP address, interface state, and packet statistics for networking data. Cisco's IOS software maintains one IDB for each hardware interface in a particular Cisco switch or router and one IDB for each subinterface. The number of IDBs present in a system varies with the Cisco hardware platform type.
== Packages and feature sets ==
IOS is shipped as a unique file that has been compiled for specific Cisco network devices. Each IOS Image therefore include a feature set, which determine the command-line interface (CLI) commands and features that are available on different Cisco devices. Upgrading to another feature set therefore entails the installation of a new IOS image on the networking device and reloading the IOS operating system. Information about the IOS version and feature-set running on a Cisco device can be obtained with the show version command.<ref></ref>
 
Most Cisco products that run IOS also have one or more "feature sets" or "packages", typically eight packages for Cisco routers and five packages for Cisco network switches. For example, Cisco IOS releases meant for use on Catalyst switches are available as "standard" versions (providing only basic IP routing), "enhanced" versions, which provide full IPv4 routing support, and "advanced IP services" versions, which provide the enhanced features as well as IPv6 support.<ref name="train" />
Beginning with the 1900, 2900 and 3900 series of ISR Routers, Cisco revised the licensing model of IOS. To simplify the process of enlarging the feature-set and reduce the need for network operating system reloads, Cisco introduced universal IOS images, that include all features available for a device and customers may unlock certain features by purchasing an additional software license.<ref></ref> The exact feature set required for a particular function can be determined using the urltoken Cisco Feature Set Browser. Routers come with IP Base installed, and additional feature pack licenses can be installed as bolt-on additions to expand the feature set of the device. The available feature packs are:
* Data adds features like BFD, IP SLAs, IPX, L2TPv3, Mobile IP, MPLS, SCTP.
* Security adds features like VPN, Firewall, IP SLAs, NAC.
* Unified Comms adds features like CallManager Express, Gatekeeper, H.323, IP SLAs, MGCP, SIP, VoIP, CUBE(SBC).
IOS images can not be updated with software bug fixes. To patch a vulnerability in an IOS, a binary file with the entire operating system needs to be loaded.<ref></ref>
== Versioning ==
Cisco IOS is versioned using three numbers and some letters, in the general form a.b(c.d)e, where:
* a is the major version number.
* b is the minor version number.
* c is the release number, which begins at one and increments as new releases in a same way a.b train are released. "Train" is Cisco-speak for "a vehicle for delivering Cisco software to a specific set of platforms and features."
* d (omitted from general releases) is the interim build number.
* e (zero, one or two letters) is the software release train identifier, such as none (which designates the mainline, see below), T (for Technology), E (for Enterprise), S (for Service provider), XA as a special functionality train, XB as a different special functionality train, etc.
Rebuilds – Often a rebuild is compiled to fix a single specific problem or vulnerability for a given IOS version. For example, 12.1(8)E14 is a Rebuild, the 14 denoting the 14th rebuild of 12.1(8)E. Rebuilds are produced to either quickly repair a defect, or to satisfy customers who do not want to upgrade to a later major revision because they may be running critical infrastructure on their devices, and hence prefer to minimize change and risk.
Interim releases – Are usually produced on a weekly basis, and form a roll-up of current development effort. The Cisco advisory web site may list more than one possible interim to fix an associated issue (the reason for this is unknown to the general public).
Maintenance releases – Rigorously tested releases that are made available and include enhancements and bug fixes. Cisco recommend upgrading to Maintenance releases where possible, over Interim and Rebuild releases.
=== Trains ===
Cisco says, "A train is a vehicle for delivering Cisco software to a specific set of platforms and features."<ref name="train"></ref>
==== Until 12.4 ====
Before Cisco IOS release 15, releases were split into several trains, each containing a different set of features. Trains more or less map onto distinct markets or groups of customers that Cisco targeted.<ref name="train" />
* The mainline train is intended to be the most stable release the company can offer, and its feature set never expands during its lifetime. Updates are released only to address bugs in the product. The previous technology train becomes the source for the current mainline train — for example, the 12.1T train becomes the basis for the 12.2 mainline. Therefore, to determine the features available in a particular mainline release, look at the previous T train release. <ref name="naming"></ref>
* The T – Technology train, gets new features and bug fixes throughout its life, and is therefore potentially less stable than the mainline. (In releases prior to Cisco IOS Release 12.0, the P train served as the Technology train.) Cisco doesn't recommend usage of T train in production environments unless there is urgency to implement a certain T train's new IOS feature. <ref name="naming"/>
* The S – Service Provider train, runs only on the company's core router products and is heavily customized for Service Provider customers. <ref name="naming"/>
* The E – Enterprise train, is customized for implementation in enterprise environments. <ref name="naming"/>
* The B – broadband train, supports internet based broadband features. <ref name="naming"/>
* The X* (XA, XB, etc.) – Special Release train, contains one-off releases designed to fix a certain bug or provide a new feature. These are eventually merged with one of the above trains. <ref name="naming"/>
There were other trains from time to time, designed for specific needs — for example, the 12.0AA train contained new code required for Cisco's AS5800 product.
=== Since 15.0 ===
Starting with Cisco IOS release 15, there is just a single train, the M/T train. This train includes both extended maintenance releases and standard maintenance releases. The M releases are extended maintenance releases, and Cisco will provide bug fixes for 44 months. The T releases are standard maintenance releases, and Cisco will only provide bug fixes for 18 months.
== Security and vulnerabilities ==
Because IOS needs to know the cleartext password for certain uses, (e.g., CHAP authentication) passwords entered into the CLI by default are weakly encrypted as 'Type 7' ciphertext, such as "<tt>Router(config)#username jdoe password 7 0832585B1910010713181F</tt>". This is designed to prevent "shoulder-surfing" attacks when viewing router configurations and is not secure – they are easily decrypted using software called "getpass" available since 1995, or "ios7crypt",<ref> urltoken ios7crypt</ref> a modern variant, although the passwords can be decoded by the router using the "key chain" command and entering the type 7 password as the key, and then issuing a "show key" command; the above example decrypts to "stupidpass".<ref> urltoken Insecure.org Cisco password decryption</ref> However, the program will not decrypt 'Type 5' passwords or passwords set with the <tt>enable secret</tt> command, which uses salted MD5 hashes.<ref></ref>
Cisco recommends that all Cisco IOS devices implement the authentication, authorization, and accounting (AAA) security model. AAA can use local, RADIUS, and TACACS+ databases. However, a local account is usually still required for emergency situations.<ref></ref>
At the Black Hat Briefings conference in July 2005, Michael Lynn, working for Internet Security Systems at the time, presented information about a vulnerability in IOS.<ref></ref>
Cisco had already issued a patch, but asked that the flaw not be disclosed.<ref></ref>
Cisco filed a lawsuit, but settled after an injunction was issued to prevent further disclosures.<ref></ref>
== IOS XR train ==
For Cisco products that required very high availability, such as the Cisco CRS-1, the limitations of a monolithic kernel were not acceptable. In addition, competitive router operating systems that emerged 10–20 years after IOS, such as Juniper's JUNOS, were designed not to have these limitations.<ref> urltoken Juniper Networks: JunOS</ref> Cisco's response was to develop a tree of the Cisco IOS that offered modularity and memory protection between processes, lightweight threads, Preemption (computing) and the ability to independently restart failed processes. The IOS XR development train used the real-time operating system microkernel (QNX), so a large part of the IOS source code was re-written to take advantage of the features offered by the kernel. In 2005 Cisco introduced the Cisco IOS XR network operating system on the Cisco 12000 of network routers, extending the microkernel architecture from the CRS-1 routers to Cisco's widely deployed core routers. In 2006 Cisco introduced IOS Software Modularity, which extends the microkernel architecture into the IOS environment, while still providing the software upgrade capabilities.

Cisco Internetwork Operating System (IOS) is a family of network operating systems used on many Cisco Systems routers and current Cisco network switches. Earlier, Cisco switches ran CatOS. IOS is a package of routing, switching, internetworking and telecommunications functions integrated into a multitasking operating system. Although the IOS code base includes a cooperative multitasking kernel, most IOS features have been ported to other kernels such as QNX and Linux for use in Cisco products.
Not all Cisco products run IOS. Notable exceptions include ASA security products, which run a Linux-derived operating system, carrier routers which run IOS XR and Cisco's Nexus switch and FC switch products which run Cisco NX-OS.